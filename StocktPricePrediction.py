{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e9b58df1-1f87-4a87-8ed9-8c1f10a05183",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Adj Close</th>\n",
       "      <th>Volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2010-01-01 00:00:00+02:00</th>\n",
       "      <td>3.582293</td>\n",
       "      <td>3.582293</td>\n",
       "      <td>3.582293</td>\n",
       "      <td>3.582293</td>\n",
       "      <td>3.523511</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-01-04 00:00:00+02:00</th>\n",
       "      <td>3.613994</td>\n",
       "      <td>3.677398</td>\n",
       "      <td>3.487188</td>\n",
       "      <td>3.645696</td>\n",
       "      <td>3.585874</td>\n",
       "      <td>11846086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-01-05 00:00:00+02:00</th>\n",
       "      <td>3.645696</td>\n",
       "      <td>3.677398</td>\n",
       "      <td>3.613994</td>\n",
       "      <td>3.645696</td>\n",
       "      <td>3.585874</td>\n",
       "      <td>7929532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-01-06 00:00:00+02:00</th>\n",
       "      <td>3.645696</td>\n",
       "      <td>3.677398</td>\n",
       "      <td>3.550591</td>\n",
       "      <td>3.613994</td>\n",
       "      <td>3.554692</td>\n",
       "      <td>9721300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-01-07 00:00:00+02:00</th>\n",
       "      <td>3.550591</td>\n",
       "      <td>3.582293</td>\n",
       "      <td>3.518889</td>\n",
       "      <td>3.550591</td>\n",
       "      <td>3.492329</td>\n",
       "      <td>7407485</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               Open      High       Low     Close  Adj Close  \\\n",
       "Date                                                                           \n",
       "2010-01-01 00:00:00+02:00  3.582293  3.582293  3.582293  3.582293   3.523511   \n",
       "2010-01-04 00:00:00+02:00  3.613994  3.677398  3.487188  3.645696   3.585874   \n",
       "2010-01-05 00:00:00+02:00  3.645696  3.677398  3.613994  3.645696   3.585874   \n",
       "2010-01-06 00:00:00+02:00  3.645696  3.677398  3.550591  3.613994   3.554692   \n",
       "2010-01-07 00:00:00+02:00  3.550591  3.582293  3.518889  3.550591   3.492329   \n",
       "\n",
       "                             Volume  \n",
       "Date                                 \n",
       "2010-01-01 00:00:00+02:00         0  \n",
       "2010-01-04 00:00:00+02:00  11846086  \n",
       "2010-01-05 00:00:00+02:00   7929532  \n",
       "2010-01-06 00:00:00+02:00   9721300  \n",
       "2010-01-07 00:00:00+02:00   7407485  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import math \n",
    "import numpy as np \n",
    "import pandas as pd \n",
    "from datetime import date, timedelta, datetime\n",
    "from pandas.plotting import register_matplotlib_converters\n",
    "import matplotlib.pyplot as plt \n",
    "import matplotlib.dates as mdates \n",
    "import tensorflow as tf\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "from tensorflow.keras import Sequential \n",
    "from tensorflow.keras.layers import LSTM, Dense, Dropout, BatchNormalization\n",
    "from tensorflow.keras.callbacks import EarlyStopping,ModelCheckpoint\n",
    "from sklearn.preprocessing import RobustScaler, MinMaxScaler \n",
    "import seaborn as sns \n",
    "\n",
    "end_date =  date.today().strftime(\"%Y-%m-%d\")\n",
    "start_date = '2010-01-01'\n",
    "\n",
    "stockname = 'Turkish Airlines'\n",
    "symbol = 'THYAO.IS'\n",
    "\n",
    "import yfinance as yf \n",
    "df = yf.download(symbol, start=start_date, end=end_date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1c7e0047-7119-442d-b8f9-2a3f2559322c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FEATURE LIST\n",
      "['High', 'Low', 'Open', 'Close', 'Volume']\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Open</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Prediction</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2023-01-30 00:00:00+03:00</th>\n",
       "      <td>150.300</td>\n",
       "      <td>144.800</td>\n",
       "      <td>150.000</td>\n",
       "      <td>144.800</td>\n",
       "      <td>48666913</td>\n",
       "      <td>144.800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-31 00:00:00+03:00</th>\n",
       "      <td>144.500</td>\n",
       "      <td>137.600</td>\n",
       "      <td>144.500</td>\n",
       "      <td>137.600</td>\n",
       "      <td>65737449</td>\n",
       "      <td>137.600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-01 00:00:00+03:00</th>\n",
       "      <td>140.300</td>\n",
       "      <td>130.800</td>\n",
       "      <td>139.100</td>\n",
       "      <td>130.800</td>\n",
       "      <td>64560389</td>\n",
       "      <td>130.800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-02 00:00:00+03:00</th>\n",
       "      <td>136.400</td>\n",
       "      <td>125.100</td>\n",
       "      <td>130.200</td>\n",
       "      <td>134.600</td>\n",
       "      <td>103057422</td>\n",
       "      <td>134.600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-03 00:00:00+03:00</th>\n",
       "      <td>143.400</td>\n",
       "      <td>133.200</td>\n",
       "      <td>134.600</td>\n",
       "      <td>142.700</td>\n",
       "      <td>77657983</td>\n",
       "      <td>142.700</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             High     Low    Open   Close     Volume  \\\n",
       "Date                                                                   \n",
       "2023-01-30 00:00:00+03:00 150.300 144.800 150.000 144.800   48666913   \n",
       "2023-01-31 00:00:00+03:00 144.500 137.600 144.500 137.600   65737449   \n",
       "2023-02-01 00:00:00+03:00 140.300 130.800 139.100 130.800   64560389   \n",
       "2023-02-02 00:00:00+03:00 136.400 125.100 130.200 134.600  103057422   \n",
       "2023-02-03 00:00:00+03:00 143.400 133.200 134.600 142.700   77657983   \n",
       "\n",
       "                           Prediction  \n",
       "Date                                   \n",
       "2023-01-30 00:00:00+03:00     144.800  \n",
       "2023-01-31 00:00:00+03:00     137.600  \n",
       "2023-02-01 00:00:00+03:00     130.800  \n",
       "2023-02-02 00:00:00+03:00     134.600  \n",
       "2023-02-03 00:00:00+03:00     142.700  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df = df.sort_values(by=['Date']).copy()\n",
    "\n",
    "FEATURES = ['High', 'Low', 'Open', 'Close', 'Volume'\n",
    "            ,# 'Month' , 'Year', 'Adj Close'\n",
    "           ]\n",
    "\n",
    "print('FEATURE LIST')\n",
    "print([f for f in FEATURES])\n",
    "\n",
    "data = pd.DataFrame(train_df)\n",
    "data_filtered = data[FEATURES]\n",
    "\n",
    "data_filtered_ext = data_filtered.copy()\n",
    "data_filtered_ext['Prediction'] = data_filtered_ext['Close']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b79dfa07-ae97-42ca-8d22-42b914093677",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3375, 5)\n"
     ]
    }
   ],
   "source": [
    "nrows = data_filtered.shape[0]\n",
    "\n",
    "np_data_unscaled = np.array(data_filtered)\n",
    "np_data = np.reshape(np_data_unscaled, (nrows, -1))\n",
    "print(np_data.shape)\n",
    "\n",
    "scaler = MinMaxScaler()\n",
    "np_data_scaled = scaler.fit_transform(np_data_unscaled)\n",
    "\n",
    "scaler_pred = MinMaxScaler()\n",
    "df_Close = pd.DataFrame(data_filtered_ext['Close'])\n",
    "np_Close_scaled = scaler_pred.fit_transform(df_Close)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "83c0acb1-cccb-4f7f-bc14-522b19af60d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.set_printoptions(precision=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b434b6a1-ada6-4a9d-b1ad-ce3e625933c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2650, 50, 5) (2650,)\n",
      "(675, 50, 5) (675,)\n",
      "0.01081344028732197\n",
      "0.01081344028732197\n"
     ]
    }
   ],
   "source": [
    "sequence_length = 50\n",
    "\n",
    "index_Close = data.columns.get_loc(\"Close\")\n",
    "\n",
    "# Verileri train test olarak ayırın.\n",
    "# Verilerin %80 ini eğitim için kullanacağız.\n",
    "train_data_len = math.ceil(np_data_scaled.shape[0] * 0.8)\n",
    "\n",
    "train_data = np_data_scaled[0:train_data_len, :]\n",
    "test_data = np_data_scaled[train_data_len - sequence_length:, :]\n",
    "\n",
    "# Model için verileri bu biçime dönüştürün : [samples, time steps, features] \n",
    "def partition_dataset(sequence_length, data):\n",
    "    x, y = [], []\n",
    "    data_len = data.shape[0]\n",
    "    for i in range(sequence_length, data_len):\n",
    "        x.append(data[i-sequence_length:i,:]) \n",
    "        y.append(data[i, index_Close]) \n",
    "\n",
    "    # Sonra bunları numpy array'e dönüştür.    \n",
    "    x = np.array(x)\n",
    "    y = np.array(y)\n",
    "    return x, y\n",
    "\n",
    "x_train, y_train = partition_dataset(sequence_length, train_data)\n",
    "x_test, y_test = partition_dataset(sequence_length, test_data)\n",
    "\n",
    "print(x_train.shape, y_train.shape)\n",
    "print(x_test.shape, y_test.shape)\n",
    "\n",
    "# İkinci girdi örneğinin son kapanış fiyatı ilk tahmin değerine eşit olmalıdır.\n",
    "print(x_train[1][sequence_length-1][index_Close])\n",
    "print(y_train[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "944d0cc8-4813-487d-af95-8357ffaa6c25",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "250 50 5\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "\n",
    "n_neurons = x_train.shape[1] * x_train.shape[2]\n",
    "print(n_neurons, x_train.shape[1], x_train.shape[2])\n",
    "\n",
    "model.add(LSTM(n_neurons, return_sequences=True, input_shape=(x_train.shape[1], x_train.shape[2]))) \n",
    "\n",
    "model.add(LSTM(n_neurons, return_sequences=False))\n",
    "\n",
    "model.add(Dense(5))\n",
    "\n",
    "model.add(Dense(1))\n",
    "\n",
    "model.compile(optimizer='adam', loss='mse')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "90843b73-e031-4e4e-b40c-84c0c327fe31",
   "metadata": {},
   "outputs": [],
   "source": [
    "callbacks = EarlyStopping(monitor = \"loss\",patience = 8,verbose = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ebce5845-5744-4348-8ecb-0036f08ee47a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "166/166 [==============================] - 19s 94ms/step - loss: 6.2669e-05 - val_loss: 0.0013\n",
      "Epoch 2/50\n",
      "166/166 [==============================] - 14s 87ms/step - loss: 1.2675e-05 - val_loss: 5.2799e-04\n",
      "Epoch 3/50\n",
      "166/166 [==============================] - 14s 86ms/step - loss: 9.1138e-06 - val_loss: 6.5937e-04\n",
      "Epoch 4/50\n",
      "166/166 [==============================] - 15s 88ms/step - loss: 7.7524e-06 - val_loss: 0.0013\n",
      "Epoch 5/50\n",
      "166/166 [==============================] - 15s 88ms/step - loss: 9.4702e-06 - val_loss: 6.0444e-04\n",
      "Epoch 6/50\n",
      "166/166 [==============================] - 15s 91ms/step - loss: 6.9981e-06 - val_loss: 5.0480e-04\n",
      "Epoch 7/50\n",
      "166/166 [==============================] - 17s 104ms/step - loss: 6.3855e-06 - val_loss: 7.8252e-04\n",
      "Epoch 8/50\n",
      "166/166 [==============================] - 17s 100ms/step - loss: 6.1963e-06 - val_loss: 5.3397e-04\n",
      "Epoch 9/50\n",
      "166/166 [==============================] - 16s 96ms/step - loss: 6.4832e-06 - val_loss: 6.9496e-04\n",
      "Epoch 10/50\n",
      "166/166 [==============================] - 16s 95ms/step - loss: 6.3773e-06 - val_loss: 2.7291e-04\n",
      "Epoch 11/50\n",
      "166/166 [==============================] - 16s 97ms/step - loss: 7.3216e-06 - val_loss: 5.1724e-04\n",
      "Epoch 12/50\n",
      "166/166 [==============================] - 16s 98ms/step - loss: 5.4264e-06 - val_loss: 5.7465e-04\n",
      "Epoch 13/50\n",
      "166/166 [==============================] - 16s 98ms/step - loss: 5.0695e-06 - val_loss: 9.0038e-04\n",
      "Epoch 14/50\n",
      "166/166 [==============================] - 16s 97ms/step - loss: 5.5047e-06 - val_loss: 3.8271e-04\n",
      "Epoch 15/50\n",
      "166/166 [==============================] - 16s 98ms/step - loss: 4.8325e-06 - val_loss: 1.7964e-04\n",
      "Epoch 16/50\n",
      "166/166 [==============================] - 16s 99ms/step - loss: 4.3743e-06 - val_loss: 3.8342e-04\n",
      "Epoch 17/50\n",
      "166/166 [==============================] - 16s 98ms/step - loss: 4.6765e-06 - val_loss: 4.8678e-04\n",
      "Epoch 18/50\n",
      "166/166 [==============================] - 16s 96ms/step - loss: 4.3197e-06 - val_loss: 7.1517e-04\n",
      "Epoch 19/50\n",
      "166/166 [==============================] - 16s 96ms/step - loss: 4.0351e-06 - val_loss: 7.0832e-04\n",
      "Epoch 20/50\n",
      "166/166 [==============================] - 16s 97ms/step - loss: 4.7843e-06 - val_loss: 3.1526e-04\n",
      "Epoch 21/50\n",
      "166/166 [==============================] - 17s 100ms/step - loss: 5.5624e-06 - val_loss: 5.5475e-04\n",
      "Epoch 22/50\n",
      "166/166 [==============================] - 17s 105ms/step - loss: 4.3196e-06 - val_loss: 4.6126e-04\n",
      "Epoch 23/50\n",
      "166/166 [==============================] - 16s 98ms/step - loss: 4.4442e-06 - val_loss: 2.1733e-04\n",
      "Epoch 24/50\n",
      "166/166 [==============================] - 16s 99ms/step - loss: 3.6965e-06 - val_loss: 1.9020e-04\n",
      "Epoch 25/50\n",
      "166/166 [==============================] - 16s 98ms/step - loss: 3.6469e-06 - val_loss: 3.3181e-04\n",
      "Epoch 26/50\n",
      "166/166 [==============================] - 16s 98ms/step - loss: 4.0283e-06 - val_loss: 7.6043e-04\n",
      "Epoch 27/50\n",
      "166/166 [==============================] - 16s 99ms/step - loss: 4.5140e-06 - val_loss: 3.2403e-04\n",
      "Epoch 28/50\n",
      "166/166 [==============================] - 16s 99ms/step - loss: 3.4815e-06 - val_loss: 8.2453e-04\n",
      "Epoch 29/50\n",
      "166/166 [==============================] - 17s 100ms/step - loss: 3.6797e-06 - val_loss: 1.9892e-04\n",
      "Epoch 30/50\n",
      "166/166 [==============================] - 16s 99ms/step - loss: 4.6198e-06 - val_loss: 4.5724e-04\n",
      "Epoch 31/50\n",
      "166/166 [==============================] - 16s 98ms/step - loss: 3.4136e-06 - val_loss: 1.7638e-04\n",
      "Epoch 32/50\n",
      "166/166 [==============================] - 17s 100ms/step - loss: 3.3620e-06 - val_loss: 3.0634e-04\n",
      "Epoch 33/50\n",
      "166/166 [==============================] - 16s 99ms/step - loss: 3.4192e-06 - val_loss: 1.6359e-04\n",
      "Epoch 34/50\n",
      "166/166 [==============================] - 16s 99ms/step - loss: 3.6273e-06 - val_loss: 1.8038e-04\n",
      "Epoch 35/50\n",
      "166/166 [==============================] - 17s 100ms/step - loss: 3.5885e-06 - val_loss: 1.9309e-04\n",
      "Epoch 36/50\n",
      "166/166 [==============================] - 17s 100ms/step - loss: 3.8726e-06 - val_loss: 2.3350e-04\n",
      "Epoch 37/50\n",
      "166/166 [==============================] - 16s 99ms/step - loss: 3.7766e-06 - val_loss: 1.8495e-04\n",
      "Epoch 38/50\n",
      "166/166 [==============================] - 16s 99ms/step - loss: 3.5671e-06 - val_loss: 3.0538e-04\n",
      "Epoch 39/50\n",
      "166/166 [==============================] - 16s 98ms/step - loss: 3.2608e-06 - val_loss: 2.7266e-04\n",
      "Epoch 40/50\n",
      "166/166 [==============================] - 17s 101ms/step - loss: 3.6492e-06 - val_loss: 4.3421e-04\n",
      "Epoch 41/50\n",
      "166/166 [==============================] - 16s 98ms/step - loss: 3.2745e-06 - val_loss: 3.1552e-04\n",
      "Epoch 42/50\n",
      "166/166 [==============================] - 16s 99ms/step - loss: 3.7057e-06 - val_loss: 4.0314e-04\n",
      "Epoch 43/50\n",
      "166/166 [==============================] - 16s 99ms/step - loss: 3.5208e-06 - val_loss: 1.9599e-04\n",
      "Epoch 44/50\n",
      "166/166 [==============================] - 17s 100ms/step - loss: 3.2838e-06 - val_loss: 2.5376e-04\n",
      "Epoch 45/50\n",
      "166/166 [==============================] - 16s 99ms/step - loss: 3.2311e-06 - val_loss: 2.4984e-04\n",
      "Epoch 46/50\n",
      "166/166 [==============================] - 16s 99ms/step - loss: 3.5953e-06 - val_loss: 4.1739e-04\n",
      "Epoch 47/50\n",
      "166/166 [==============================] - 16s 99ms/step - loss: 3.4862e-06 - val_loss: 2.0802e-04\n",
      "Epoch 48/50\n",
      "166/166 [==============================] - 17s 101ms/step - loss: 3.7598e-06 - val_loss: 1.4387e-04\n",
      "Epoch 49/50\n",
      "166/166 [==============================] - 17s 99ms/step - loss: 3.5017e-06 - val_loss: 1.8391e-04\n",
      "Epoch 50/50\n",
      "166/166 [==============================] - 16s 98ms/step - loss: 3.6049e-06 - val_loss: 1.2879e-04\n"
     ]
    }
   ],
   "source": [
    "epochs = 50\n",
    "batch_size = 16\n",
    "history = model.fit(x_train, y_train, \n",
    "                    batch_size=batch_size, \n",
    "                    epochs=epochs,\n",
    "                    validation_data=(x_test, y_test),\n",
    "                    callbacks = [callbacks]                 \n",
    "                   )\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b1c59f62-c808-4753-ba45-572c2358f974",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "22/22 [==============================] - 2s 67ms/step\n",
      "R2: 0.998\n",
      "Median Absolute Error (MAE): 0.86\n",
      "Mean Absolute Percentage Error (MAPE): 2.16 %\n",
      "Median Absolute Percentage Error (MDAPE): 1.53 %\n"
     ]
    }
   ],
   "source": [
    "y_pred_scaled = model.predict(x_test)\n",
    "\n",
    "y_pred = scaler_pred.inverse_transform(y_pred_scaled)\n",
    "y_test_unscaled = scaler_pred.inverse_transform(y_test.reshape(-1, 1))\n",
    "\n",
    "R2 = r2_score(y_test_unscaled, y_pred)\n",
    "print(f'R2: {np.round(R2, 3)}')\n",
    "\n",
    "MAE = mean_absolute_error(y_test_unscaled, y_pred)\n",
    "print(f'Median Absolute Error (MAE): {np.round(MAE, 2)}')\n",
    "\n",
    "MAPE = np.mean((np.abs(np.subtract(y_test_unscaled, y_pred)/ y_test_unscaled))) * 100\n",
    "print(f'Mean Absolute Percentage Error (MAPE): {np.round(MAPE, 2)} %')\n",
    "\n",
    "MDAPE = np.median((np.abs(np.subtract(y_test_unscaled, y_pred)/ y_test_unscaled)) ) * 100\n",
    "print(f'Median Absolute Percentage Error (MDAPE): {np.round(MDAPE, 2)} %')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d96fec94-55bd-4e47-b488-64bc030d5e72",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Tarihin görüntülendiği tarih\n",
    "display_start_date = \"2019-01-01\" \n",
    "\n",
    "# Geçerli ve tahmini fiyatlar arasındaki fark\n",
    "train = pd.DataFrame(data_filtered_ext['Close'][:train_data_len + 1]).rename(columns={'Close': 'y_train'})\n",
    "valid = pd.DataFrame(data_filtered_ext['Close'][train_data_len:]).rename(columns={'Close': 'y_test'})\n",
    "valid.insert(1, \"y_pred\", y_pred, True)\n",
    "valid.insert(1, \"residuals\", valid[\"y_pred\"] - valid[\"y_test\"], True)\n",
    "df_union = pd.concat([train, valid])\n",
    "\n",
    "# Daha yakın bir zaman dilimine yakınlaştırın\n",
    "df_union_zoom = df_union[df_union.index > display_start_date]\n",
    "\n",
    "fig, ax1 = plt.subplots(figsize=(16, 8))\n",
    "plt.title(\"y_pred vs y_test\")\n",
    "plt.ylabel(stockname, fontsize=18)\n",
    "sns.set_palette([\"#090364\", \"#1960EF\", \"#EF5919\"])\n",
    "sns.lineplot(data=df_union_zoom[['y_pred', 'y_train', 'y_test']], linewidth=1.0, dashes=False, ax=ax1)\n",
    "\n",
    "# Farkların grafiği\n",
    "df_sub = [\"#2BC97A\" if x > 0 else \"#C92B2B\" for x in df_union_zoom[\"residuals\"].dropna()]\n",
    "ax1.bar(height=df_union_zoom['residuals'].dropna(), x=df_union_zoom['residuals'].dropna().index, width=3, label='residuals', color=df_sub)\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "b8d9a078-dc88-4068-9398-984d79e99867",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 20ms/step\n",
      "The close price for Turkish Airlines at 2023-02-06 was 142.7\n",
      "The predicted close price is 138.6199951171875 (-2.94%)\n"
     ]
    }
   ],
   "source": [
    "df_temp = df[-sequence_length:]\n",
    "new_df = df_temp.filter(FEATURES)\n",
    "\n",
    "N = sequence_length\n",
    "\n",
    "# Son N günlük kapanış fiyatı değerlerini alın ve verileri 0 ile 1 arasında değerler olacak şekilde ölçeklendirin\n",
    "last_N_days = new_df[-sequence_length:].values\n",
    "last_N_days_scaled = scaler.transform(last_N_days)\n",
    "\n",
    "# Boş bir liste oluşturun ve son N günü ekleyin\n",
    "X_test_new = []\n",
    "X_test_new.append(last_N_days_scaled)\n",
    "\n",
    "# X_test veri kümesini numpy dizisine dönüştürün ve verileri tekrar eski haline çevirin\n",
    "pred_price_scaled = model.predict(np.array(X_test_new))\n",
    "pred_price_unscaled = scaler_pred.inverse_transform(pred_price_scaled.reshape(-1, 1))\n",
    "\n",
    "# Bir sonraki gün için son fiyatı ve tahmini fiyatı yazdırın\n",
    "price_today = np.round(new_df['Close'][-1], 2)\n",
    "predicted_price = np.round(pred_price_unscaled.ravel()[0], 2)\n",
    "change_percent = np.round(100 - (price_today * 100)/predicted_price, 2)\n",
    "\n",
    "plus = '+'; minus = ''\n",
    "print(f'The close price for {stockname} at {end_date} was {price_today}')\n",
    "print(f'The predicted close price is {predicted_price} ({plus if change_percent > 0 else minus}{change_percent}%)')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
